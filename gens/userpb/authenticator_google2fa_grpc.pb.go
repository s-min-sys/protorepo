// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: proto/user/authenticator_google2fa.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticatorGoogle2FaClient is the client API for AuthenticatorGoogle2Fa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticatorGoogle2FaClient interface {
	GetSetupInfo(ctx context.Context, in *GetSetupInfoRequest, opts ...grpc.CallOption) (*GetSetupInfoResponse, error)
	DoSetup(ctx context.Context, in *DoSetupRequest, opts ...grpc.CallOption) (*DoSetupResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
}

type authenticatorGoogle2FaClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticatorGoogle2FaClient(cc grpc.ClientConnInterface) AuthenticatorGoogle2FaClient {
	return &authenticatorGoogle2FaClient{cc}
}

func (c *authenticatorGoogle2FaClient) GetSetupInfo(ctx context.Context, in *GetSetupInfoRequest, opts ...grpc.CallOption) (*GetSetupInfoResponse, error) {
	out := new(GetSetupInfoResponse)
	err := c.cc.Invoke(ctx, "/AuthenticatorGoogle2fa/GetSetupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticatorGoogle2FaClient) DoSetup(ctx context.Context, in *DoSetupRequest, opts ...grpc.CallOption) (*DoSetupResponse, error) {
	out := new(DoSetupResponse)
	err := c.cc.Invoke(ctx, "/AuthenticatorGoogle2fa/DoSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticatorGoogle2FaClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/AuthenticatorGoogle2fa/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticatorGoogle2FaServer is the server API for AuthenticatorGoogle2Fa service.
// All implementations must embed UnimplementedAuthenticatorGoogle2FaServer
// for forward compatibility
type AuthenticatorGoogle2FaServer interface {
	GetSetupInfo(context.Context, *GetSetupInfoRequest) (*GetSetupInfoResponse, error)
	DoSetup(context.Context, *DoSetupRequest) (*DoSetupResponse, error)
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	mustEmbedUnimplementedAuthenticatorGoogle2FaServer()
}

// UnimplementedAuthenticatorGoogle2FaServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticatorGoogle2FaServer struct {
}

func (UnimplementedAuthenticatorGoogle2FaServer) GetSetupInfo(context.Context, *GetSetupInfoRequest) (*GetSetupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetupInfo not implemented")
}
func (UnimplementedAuthenticatorGoogle2FaServer) DoSetup(context.Context, *DoSetupRequest) (*DoSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSetup not implemented")
}
func (UnimplementedAuthenticatorGoogle2FaServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedAuthenticatorGoogle2FaServer) mustEmbedUnimplementedAuthenticatorGoogle2FaServer() {
}

// UnsafeAuthenticatorGoogle2FaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticatorGoogle2FaServer will
// result in compilation errors.
type UnsafeAuthenticatorGoogle2FaServer interface {
	mustEmbedUnimplementedAuthenticatorGoogle2FaServer()
}

func RegisterAuthenticatorGoogle2FaServer(s grpc.ServiceRegistrar, srv AuthenticatorGoogle2FaServer) {
	s.RegisterService(&AuthenticatorGoogle2Fa_ServiceDesc, srv)
}

func _AuthenticatorGoogle2Fa_GetSetupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorGoogle2FaServer).GetSetupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticatorGoogle2fa/GetSetupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorGoogle2FaServer).GetSetupInfo(ctx, req.(*GetSetupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticatorGoogle2Fa_DoSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorGoogle2FaServer).DoSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticatorGoogle2fa/DoSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorGoogle2FaServer).DoSetup(ctx, req.(*DoSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticatorGoogle2Fa_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorGoogle2FaServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticatorGoogle2fa/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorGoogle2FaServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticatorGoogle2Fa_ServiceDesc is the grpc.ServiceDesc for AuthenticatorGoogle2Fa service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticatorGoogle2Fa_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthenticatorGoogle2fa",
	HandlerType: (*AuthenticatorGoogle2FaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSetupInfo",
			Handler:    _AuthenticatorGoogle2Fa_GetSetupInfo_Handler,
		},
		{
			MethodName: "DoSetup",
			Handler:    _AuthenticatorGoogle2Fa_DoSetup_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _AuthenticatorGoogle2Fa_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user/authenticator_google2fa.proto",
}
