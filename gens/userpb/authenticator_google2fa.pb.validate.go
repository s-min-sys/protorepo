// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/user/authenticator_google2fa.proto

package userpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSetupInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSetupInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSetupInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSetupInfoRequestMultiError, or nil if none found.
func (m *GetSetupInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSetupInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	if len(errors) > 0 {
		return GetSetupInfoRequestMultiError(errors)
	}

	return nil
}

// GetSetupInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetSetupInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSetupInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSetupInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSetupInfoRequestMultiError) AllErrors() []error { return m }

// GetSetupInfoRequestValidationError is the validation error returned by
// GetSetupInfoRequest.Validate if the designated constraints aren't met.
type GetSetupInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSetupInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSetupInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSetupInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSetupInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSetupInfoRequestValidationError) ErrorName() string {
	return "GetSetupInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSetupInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSetupInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSetupInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSetupInfoRequestValidationError{}

// Validate checks the field values on GetSetupInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSetupInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSetupInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSetupInfoResponseMultiError, or nil if none found.
func (m *GetSetupInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSetupInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSetupInfoResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSetupInfoResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSetupInfoResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SecretKey

	// no validation rules for QrCode

	if len(errors) > 0 {
		return GetSetupInfoResponseMultiError(errors)
	}

	return nil
}

// GetSetupInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetSetupInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSetupInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSetupInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSetupInfoResponseMultiError) AllErrors() []error { return m }

// GetSetupInfoResponseValidationError is the validation error returned by
// GetSetupInfoResponse.Validate if the designated constraints aren't met.
type GetSetupInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSetupInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSetupInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSetupInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSetupInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSetupInfoResponseValidationError) ErrorName() string {
	return "GetSetupInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSetupInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSetupInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSetupInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSetupInfoResponseValidationError{}

// Validate checks the field values on DoSetupRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoSetupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoSetupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoSetupRequestMultiError,
// or nil if none found.
func (m *DoSetupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DoSetupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Code

	if len(errors) > 0 {
		return DoSetupRequestMultiError(errors)
	}

	return nil
}

// DoSetupRequestMultiError is an error wrapping multiple validation errors
// returned by DoSetupRequest.ValidateAll() if the designated constraints
// aren't met.
type DoSetupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DoSetupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DoSetupRequestMultiError) AllErrors() []error { return m }

// DoSetupRequestValidationError is the validation error returned by
// DoSetupRequest.Validate if the designated constraints aren't met.
type DoSetupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoSetupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoSetupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoSetupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoSetupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoSetupRequestValidationError) ErrorName() string { return "DoSetupRequestValidationError" }

// Error satisfies the builtin error interface
func (e DoSetupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoSetupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoSetupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoSetupRequestValidationError{}

// Validate checks the field values on DoSetupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DoSetupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoSetupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DoSetupResponseMultiError, or nil if none found.
func (m *DoSetupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DoSetupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DoSetupResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DoSetupResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DoSetupResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DoSetupResponseMultiError(errors)
	}

	return nil
}

// DoSetupResponseMultiError is an error wrapping multiple validation errors
// returned by DoSetupResponse.ValidateAll() if the designated constraints
// aren't met.
type DoSetupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DoSetupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DoSetupResponseMultiError) AllErrors() []error { return m }

// DoSetupResponseValidationError is the validation error returned by
// DoSetupResponse.Validate if the designated constraints aren't met.
type DoSetupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoSetupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoSetupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoSetupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoSetupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoSetupResponseValidationError) ErrorName() string { return "DoSetupResponseValidationError" }

// Error satisfies the builtin error interface
func (e DoSetupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoSetupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoSetupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoSetupResponseValidationError{}

// Validate checks the field values on VerifyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyRequestMultiError, or
// nil if none found.
func (m *VerifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Code

	if len(errors) > 0 {
		return VerifyRequestMultiError(errors)
	}

	return nil
}

// VerifyRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyRequestMultiError) AllErrors() []error { return m }

// VerifyRequestValidationError is the validation error returned by
// VerifyRequest.Validate if the designated constraints aren't met.
type VerifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyRequestValidationError) ErrorName() string { return "VerifyRequestValidationError" }

// Error satisfies the builtin error interface
func (e VerifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyRequestValidationError{}

// Validate checks the field values on VerifyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyResponseMultiError,
// or nil if none found.
func (m *VerifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerifyResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerifyResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VerifyResponseMultiError(errors)
	}

	return nil
}

// VerifyResponseMultiError is an error wrapping multiple validation errors
// returned by VerifyResponse.ValidateAll() if the designated constraints
// aren't met.
type VerifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyResponseMultiError) AllErrors() []error { return m }

// VerifyResponseValidationError is the validation error returned by
// VerifyResponse.Validate if the designated constraints aren't met.
type VerifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyResponseValidationError) ErrorName() string { return "VerifyResponseValidationError" }

// Error satisfies the builtin error interface
func (e VerifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyResponseValidationError{}
