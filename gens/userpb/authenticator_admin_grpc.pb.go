// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: proto/user/authenticator_admin.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticatorAdminClient is the client API for AuthenticatorAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticatorAdminClient interface {
	SetAdminFlag(ctx context.Context, in *SetAdminFlagRequest, opts ...grpc.CallOption) (*SetAdminFlagResponse, error)
}

type authenticatorAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticatorAdminClient(cc grpc.ClientConnInterface) AuthenticatorAdminClient {
	return &authenticatorAdminClient{cc}
}

func (c *authenticatorAdminClient) SetAdminFlag(ctx context.Context, in *SetAdminFlagRequest, opts ...grpc.CallOption) (*SetAdminFlagResponse, error) {
	out := new(SetAdminFlagResponse)
	err := c.cc.Invoke(ctx, "/AuthenticatorAdmin/SetAdminFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticatorAdminServer is the server API for AuthenticatorAdmin service.
// All implementations must embed UnimplementedAuthenticatorAdminServer
// for forward compatibility
type AuthenticatorAdminServer interface {
	SetAdminFlag(context.Context, *SetAdminFlagRequest) (*SetAdminFlagResponse, error)
	mustEmbedUnimplementedAuthenticatorAdminServer()
}

// UnimplementedAuthenticatorAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticatorAdminServer struct {
}

func (UnimplementedAuthenticatorAdminServer) SetAdminFlag(context.Context, *SetAdminFlagRequest) (*SetAdminFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAdminFlag not implemented")
}
func (UnimplementedAuthenticatorAdminServer) mustEmbedUnimplementedAuthenticatorAdminServer() {}

// UnsafeAuthenticatorAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticatorAdminServer will
// result in compilation errors.
type UnsafeAuthenticatorAdminServer interface {
	mustEmbedUnimplementedAuthenticatorAdminServer()
}

func RegisterAuthenticatorAdminServer(s grpc.ServiceRegistrar, srv AuthenticatorAdminServer) {
	s.RegisterService(&AuthenticatorAdmin_ServiceDesc, srv)
}

func _AuthenticatorAdmin_SetAdminFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAdminFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorAdminServer).SetAdminFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticatorAdmin/SetAdminFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorAdminServer).SetAdminFlag(ctx, req.(*SetAdminFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticatorAdmin_ServiceDesc is the grpc.ServiceDesc for AuthenticatorAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticatorAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthenticatorAdmin",
	HandlerType: (*AuthenticatorAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAdminFlag",
			Handler:    _AuthenticatorAdmin_SetAdminFlag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user/authenticator_admin.proto",
}
