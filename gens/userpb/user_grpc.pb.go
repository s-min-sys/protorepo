// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: proto/user/user.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServicerClient is the client API for UserServicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServicerClient interface {
	RegisterBegin(ctx context.Context, in *RegisterBeginRequest, opts ...grpc.CallOption) (*RegisterBeginResponse, error)
	RegisterCheck(ctx context.Context, in *RegisterCheckRequest, opts ...grpc.CallOption) (*RegisterCheckResponse, error)
	RegisterEnd(ctx context.Context, in *RegisterEndRequest, opts ...grpc.CallOption) (*RegisterEndResponse, error)
	LoginBegin(ctx context.Context, in *LoginBeginRequest, opts ...grpc.CallOption) (*LoginBeginResponse, error)
	LoginCheck(ctx context.Context, in *LoginCheckRequest, opts ...grpc.CallOption) (*LoginCheckResponse, error)
	LoginEnd(ctx context.Context, in *LoginEndRequest, opts ...grpc.CallOption) (*LoginEndResponse, error)
	SSOLogin(ctx context.Context, in *SSOLoginRequest, opts ...grpc.CallOption) (*SSOLoginResponse, error)
	ChangeBegin(ctx context.Context, in *ChangeBeginRequest, opts ...grpc.CallOption) (*ChangeBeginResponse, error)
	ChangeCheck(ctx context.Context, in *ChangeCheckRequest, opts ...grpc.CallOption) (*ChangeCheckResponse, error)
	ChangeEnd(ctx context.Context, in *ChangeEndRequest, opts ...grpc.CallOption) (*ChangeEndResponse, error)
	DeleteBegin(ctx context.Context, in *DeleteBeginRequest, opts ...grpc.CallOption) (*DeleteBeginResponse, error)
	DeleteCheck(ctx context.Context, in *DeleteCheckRequest, opts ...grpc.CallOption) (*DeleteCheckResponse, error)
	DeleteEnd(ctx context.Context, in *DeleteEndRequest, opts ...grpc.CallOption) (*DeleteEndResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error)
	RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*RenewTokenResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
}

type userServicerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServicerClient(cc grpc.ClientConnInterface) UserServicerClient {
	return &userServicerClient{cc}
}

func (c *userServicerClient) RegisterBegin(ctx context.Context, in *RegisterBeginRequest, opts ...grpc.CallOption) (*RegisterBeginResponse, error) {
	out := new(RegisterBeginResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/RegisterBegin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) RegisterCheck(ctx context.Context, in *RegisterCheckRequest, opts ...grpc.CallOption) (*RegisterCheckResponse, error) {
	out := new(RegisterCheckResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/RegisterCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) RegisterEnd(ctx context.Context, in *RegisterEndRequest, opts ...grpc.CallOption) (*RegisterEndResponse, error) {
	out := new(RegisterEndResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/RegisterEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) LoginBegin(ctx context.Context, in *LoginBeginRequest, opts ...grpc.CallOption) (*LoginBeginResponse, error) {
	out := new(LoginBeginResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/LoginBegin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) LoginCheck(ctx context.Context, in *LoginCheckRequest, opts ...grpc.CallOption) (*LoginCheckResponse, error) {
	out := new(LoginCheckResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/LoginCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) LoginEnd(ctx context.Context, in *LoginEndRequest, opts ...grpc.CallOption) (*LoginEndResponse, error) {
	out := new(LoginEndResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/LoginEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) SSOLogin(ctx context.Context, in *SSOLoginRequest, opts ...grpc.CallOption) (*SSOLoginResponse, error) {
	out := new(SSOLoginResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/SSOLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) ChangeBegin(ctx context.Context, in *ChangeBeginRequest, opts ...grpc.CallOption) (*ChangeBeginResponse, error) {
	out := new(ChangeBeginResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/ChangeBegin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) ChangeCheck(ctx context.Context, in *ChangeCheckRequest, opts ...grpc.CallOption) (*ChangeCheckResponse, error) {
	out := new(ChangeCheckResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/ChangeCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) ChangeEnd(ctx context.Context, in *ChangeEndRequest, opts ...grpc.CallOption) (*ChangeEndResponse, error) {
	out := new(ChangeEndResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/ChangeEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) DeleteBegin(ctx context.Context, in *DeleteBeginRequest, opts ...grpc.CallOption) (*DeleteBeginResponse, error) {
	out := new(DeleteBeginResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/DeleteBegin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) DeleteCheck(ctx context.Context, in *DeleteCheckRequest, opts ...grpc.CallOption) (*DeleteCheckResponse, error) {
	out := new(DeleteCheckResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/DeleteCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) DeleteEnd(ctx context.Context, in *DeleteEndRequest, opts ...grpc.CallOption) (*DeleteEndResponse, error) {
	out := new(DeleteEndResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/DeleteEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error) {
	out := new(CheckTokenResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*RenewTokenResponse, error) {
	out := new(RenewTokenResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/RenewToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicerClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/UserServicer/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServicerServer is the server API for UserServicer service.
// All implementations must embed UnimplementedUserServicerServer
// for forward compatibility
type UserServicerServer interface {
	RegisterBegin(context.Context, *RegisterBeginRequest) (*RegisterBeginResponse, error)
	RegisterCheck(context.Context, *RegisterCheckRequest) (*RegisterCheckResponse, error)
	RegisterEnd(context.Context, *RegisterEndRequest) (*RegisterEndResponse, error)
	LoginBegin(context.Context, *LoginBeginRequest) (*LoginBeginResponse, error)
	LoginCheck(context.Context, *LoginCheckRequest) (*LoginCheckResponse, error)
	LoginEnd(context.Context, *LoginEndRequest) (*LoginEndResponse, error)
	SSOLogin(context.Context, *SSOLoginRequest) (*SSOLoginResponse, error)
	ChangeBegin(context.Context, *ChangeBeginRequest) (*ChangeBeginResponse, error)
	ChangeCheck(context.Context, *ChangeCheckRequest) (*ChangeCheckResponse, error)
	ChangeEnd(context.Context, *ChangeEndRequest) (*ChangeEndResponse, error)
	DeleteBegin(context.Context, *DeleteBeginRequest) (*DeleteBeginResponse, error)
	DeleteCheck(context.Context, *DeleteCheckRequest) (*DeleteCheckResponse, error)
	DeleteEnd(context.Context, *DeleteEndRequest) (*DeleteEndResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenResponse, error)
	RenewToken(context.Context, *RenewTokenRequest) (*RenewTokenResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	mustEmbedUnimplementedUserServicerServer()
}

// UnimplementedUserServicerServer must be embedded to have forward compatible implementations.
type UnimplementedUserServicerServer struct {
}

func (UnimplementedUserServicerServer) RegisterBegin(context.Context, *RegisterBeginRequest) (*RegisterBeginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBegin not implemented")
}
func (UnimplementedUserServicerServer) RegisterCheck(context.Context, *RegisterCheckRequest) (*RegisterCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCheck not implemented")
}
func (UnimplementedUserServicerServer) RegisterEnd(context.Context, *RegisterEndRequest) (*RegisterEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEnd not implemented")
}
func (UnimplementedUserServicerServer) LoginBegin(context.Context, *LoginBeginRequest) (*LoginBeginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginBegin not implemented")
}
func (UnimplementedUserServicerServer) LoginCheck(context.Context, *LoginCheckRequest) (*LoginCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCheck not implemented")
}
func (UnimplementedUserServicerServer) LoginEnd(context.Context, *LoginEndRequest) (*LoginEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginEnd not implemented")
}
func (UnimplementedUserServicerServer) SSOLogin(context.Context, *SSOLoginRequest) (*SSOLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSOLogin not implemented")
}
func (UnimplementedUserServicerServer) ChangeBegin(context.Context, *ChangeBeginRequest) (*ChangeBeginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBegin not implemented")
}
func (UnimplementedUserServicerServer) ChangeCheck(context.Context, *ChangeCheckRequest) (*ChangeCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCheck not implemented")
}
func (UnimplementedUserServicerServer) ChangeEnd(context.Context, *ChangeEndRequest) (*ChangeEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEnd not implemented")
}
func (UnimplementedUserServicerServer) DeleteBegin(context.Context, *DeleteBeginRequest) (*DeleteBeginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBegin not implemented")
}
func (UnimplementedUserServicerServer) DeleteCheck(context.Context, *DeleteCheckRequest) (*DeleteCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheck not implemented")
}
func (UnimplementedUserServicerServer) DeleteEnd(context.Context, *DeleteEndRequest) (*DeleteEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnd not implemented")
}
func (UnimplementedUserServicerServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserServicerServer) CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedUserServicerServer) RenewToken(context.Context, *RenewTokenRequest) (*RenewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewToken not implemented")
}
func (UnimplementedUserServicerServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServicerServer) mustEmbedUnimplementedUserServicerServer() {}

// UnsafeUserServicerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServicerServer will
// result in compilation errors.
type UnsafeUserServicerServer interface {
	mustEmbedUnimplementedUserServicerServer()
}

func RegisterUserServicerServer(s grpc.ServiceRegistrar, srv UserServicerServer) {
	s.RegisterService(&UserServicer_ServiceDesc, srv)
}

func _UserServicer_RegisterBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).RegisterBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/RegisterBegin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).RegisterBegin(ctx, req.(*RegisterBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_RegisterCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).RegisterCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/RegisterCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).RegisterCheck(ctx, req.(*RegisterCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_RegisterEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).RegisterEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/RegisterEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).RegisterEnd(ctx, req.(*RegisterEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_LoginBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).LoginBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/LoginBegin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).LoginBegin(ctx, req.(*LoginBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_LoginCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).LoginCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/LoginCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).LoginCheck(ctx, req.(*LoginCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_LoginEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).LoginEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/LoginEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).LoginEnd(ctx, req.(*LoginEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_SSOLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSOLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).SSOLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/SSOLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).SSOLogin(ctx, req.(*SSOLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_ChangeBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).ChangeBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/ChangeBegin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).ChangeBegin(ctx, req.(*ChangeBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_ChangeCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).ChangeCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/ChangeCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).ChangeCheck(ctx, req.(*ChangeCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_ChangeEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).ChangeEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/ChangeEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).ChangeEnd(ctx, req.(*ChangeEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_DeleteBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).DeleteBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/DeleteBegin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).DeleteBegin(ctx, req.(*DeleteBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_DeleteCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).DeleteCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/DeleteCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).DeleteCheck(ctx, req.(*DeleteCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_DeleteEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).DeleteEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/DeleteEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).DeleteEnd(ctx, req.(*DeleteEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_RenewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).RenewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/RenewToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).RenewToken(ctx, req.(*RenewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServicer_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicerServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserServicer/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicerServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServicer_ServiceDesc is the grpc.ServiceDesc for UserServicer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServicer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserServicer",
	HandlerType: (*UserServicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterBegin",
			Handler:    _UserServicer_RegisterBegin_Handler,
		},
		{
			MethodName: "RegisterCheck",
			Handler:    _UserServicer_RegisterCheck_Handler,
		},
		{
			MethodName: "RegisterEnd",
			Handler:    _UserServicer_RegisterEnd_Handler,
		},
		{
			MethodName: "LoginBegin",
			Handler:    _UserServicer_LoginBegin_Handler,
		},
		{
			MethodName: "LoginCheck",
			Handler:    _UserServicer_LoginCheck_Handler,
		},
		{
			MethodName: "LoginEnd",
			Handler:    _UserServicer_LoginEnd_Handler,
		},
		{
			MethodName: "SSOLogin",
			Handler:    _UserServicer_SSOLogin_Handler,
		},
		{
			MethodName: "ChangeBegin",
			Handler:    _UserServicer_ChangeBegin_Handler,
		},
		{
			MethodName: "ChangeCheck",
			Handler:    _UserServicer_ChangeCheck_Handler,
		},
		{
			MethodName: "ChangeEnd",
			Handler:    _UserServicer_ChangeEnd_Handler,
		},
		{
			MethodName: "DeleteBegin",
			Handler:    _UserServicer_DeleteBegin_Handler,
		},
		{
			MethodName: "DeleteCheck",
			Handler:    _UserServicer_DeleteCheck_Handler,
		},
		{
			MethodName: "DeleteEnd",
			Handler:    _UserServicer_DeleteEnd_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserServicer_ListUsers_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _UserServicer_CheckToken_Handler,
		},
		{
			MethodName: "RenewToken",
			Handler:    _UserServicer_RenewToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserServicer_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user/user.proto",
}
